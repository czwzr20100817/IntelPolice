package com.action;

import com.alibaba.fastjson.JSONObject;
import com.model.User;
import com.page.PageBean;
import com.service.CriminalService;
import com.utils.ExecuteResult;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Result;
import org.springframework.beans.factory.annotation.Autowired;

import com.constant.Url;
import com.model.Record;
import com.model.bean.RecordBean;
import com.opensymphony.xwork2.ModelDriven;
import com.service.RecordService;

import javax.servlet.http.HttpServletResponse;
import java.util.*;

/**
 * 类名称：RecordAction 类描述：笔录的实现
 */
// @ParentPackage("json-default")
@Action(value = Url.RECORD)
// 使用 convention-plugin 插件提供的@Action 注解将一个普通 java 类标注为一个可以处理用户请求的 Action，Action的名字为 struts2Test
// @Results({ @Result(name = "jsonmenu",params={"root","list"}, type = "json") })
// @Namespace("/")//使用 convention-plugin 插件提供的@Namespace 注解为这个 Action 指定一个命名空间
public class RecordAction extends BaseAction<Record> implements ModelDriven<Record> {
    private RecordBean bean = new RecordBean();

    public RecordBean getModel() {
        return bean;
    }

    @Autowired
    private RecordService recordService;
    @Autowired
    private CriminalService criminalService;

    @Action(value = Url.RECORD_PAGE_SHOW, results = {
            @Result(name = "SUCCESS", location = Url.VIEWS + "record/show.jsp")})
    public String index() throws Exception {
        //获取当前登录的用户
        User user = this.getUser(request);
        //查询数据
        recordService.pageQuery(getPageBean(), bean);
        //获取分页数据
        List entityList = pageBean.getRows();
        //填充查询对象
        request.setAttribute("searchObj", bean);
        //填充分页对象
        this.handlePageData(entityList, pageBean, request);
        return "SUCCESS";
    }

    /**
     * 添加页面
     *
     * @return
     */
    @Action(value = Url.RECORD_ADD_SHOW,
            results = {@Result(name = "SUCCESS", location = "/WEB-INF/views/record/add_trial_show.jsp")})
    public String showAdd() {
        return "SUCCESS";
    }

    /**
     * 添加
     *
     * @throws Exception
     */
    @Action(value = Url.RECORD_ADD_SUBMIT)
    public void addMenu() throws Exception {
        HttpServletResponse response = ServletActionContext.getResponse();
        response.setCharacterEncoding("utf-8");
        JSONObject jsonObject = null;
        try {
            recordService.addBean(bean);
            jsonObject = ExecuteResult.jsonReturn(ExecuteResult.SUCCESS_STATUS, true);
        } catch (Exception e) {
            jsonObject = ExecuteResult.jsonReturn(ExecuteResult.ERROR_STATUS, e.getMessage());
        }
        response.getWriter().write(jsonObject.toJSONString());
    }

    /**
     * 修改页面
     *
     * @return
     */
    @Action(value = Url.RECORD_UPDATE_SHOW,
            results = {@Result(name = "SUCCESS", location = "/WEB-INF/views/record/add_update_show.jsp")})
    public String showEdit() {
        try {
            RecordBean resultBean = recordService.findRecordById(bean.getId());
            request.setAttribute("entity", resultBean);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "SUCCESS";
    }

    /**
     * 修改
     *
     * @throws Exception
     */
    @Action(value = Url.RECORD_UPDATE_SUBMIT)
    public void updateMenu() throws Exception {
        HttpServletResponse response = ServletActionContext.getResponse();
        response.setCharacterEncoding("utf-8");
        JSONObject jsonObject = null;
        try {
            recordService.updateBean(bean.getId(), bean);
            //返回操作成功标志200， 并关闭对话框
            jsonObject = ExecuteResult.jsonReturn(ExecuteResult.SUCCESS_STATUS, true);

        } catch (Exception e) {
            //返回失败标识，并写入错误信息
            jsonObject = ExecuteResult.jsonReturn(ExecuteResult.ERROR_STATUS, e.getMessage());
        }
        response.getWriter().write(jsonObject.toJSONString());
    }

    /**
     * 删除
     *
     * @throws Exception
     */
    @Action(value = Url.RECORD_DELETE_SUBMIT)
    public void deleteMenu() throws Exception {
        HttpServletResponse response = ServletActionContext.getResponse();
        response.setCharacterEncoding("utf-8");
        JSONObject jsonObject = null;
        try {
            recordService.deleteBean(bean.getId());
            jsonObject = ExecuteResult.jsonReturn(ExecuteResult.SUCCESS_STATUS, null);
        } catch (Exception e) {
            jsonObject = ExecuteResult.jsonReturn(ExecuteResult.ERROR_STATUS, e.getMessage());
        }
        response.getWriter().write(jsonObject.toJSONString());
    }


    /**
     * 详情展示
     *
     * @throws Exception
     */
    @Action(value = Url.RECORD_DETAIL_SHOW,
            results = {@Result(name = "SUCCESS", location = "/WEB-INF/views/record/detail.jsp")})
    public String getMenuById() throws Exception {
        try {
            RecordBean bean2 = recordService.findRecordById(bean.getId());
            request.setAttribute("entity", bean2);
        } catch (Exception e) {
            String resultMessage = e.getMessage();
            request.setAttribute("message", resultMessage);
        }
        return "SUCCESS";
    }
//    /**
//     * 查询未录入的笔录
//     * @return
//     */
//	@Action(value = Url.RECORD_PAGE_SHOW_NO_INPUT,results = {
//	        @Result(name = "SUCCESS",location = Url.VIEWS+"record/show_no_input.jsp"),
//            @Result(name = "ERROR", location = "../sys_error.jsp")})
//	public String showPage(){
//	    CriminalBean criminalBean = new CriminalBean();
//        PageBean<Criminal> criminalPageBean = new PageBean<Criminal>();
//        if (getPageBean() != null && getPageBean().getPage() > 1){
//            criminalPageBean.setPage(getPageBean().getPage());
//        }
//        try {
//            criminalService.findBeanPageForModule(criminalPageBean,CommonConstant.MODULE_RECORD_NOINPUT);
//            List<CriminalBean> entityList = criminalPageBean.getRows();
//
//            if (entityList == null || entityList.size() == 0) {
//                request.setAttribute("total", 0);
//            } else {
//                request.setAttribute("list", entityList);
//                request.setAttribute("total", criminalPageBean.getTotal());			    			//总页数
//            }
//
//            //总页数和当前页码
//            request.setAttribute("pageSize", criminalPageBean.getPageSize());
//            request.setAttribute("pageCurrent", criminalPageBean.getPage());
//
//            //封装查询条件的id
//            request.setAttribute("searchFormId", UUID.randomUUID());
//
//            //搜索项
//            request.setAttribute("searchObj",criminalBean);
//
//            //案件类型显示到下拉框
//            //List<CriminalBean> caseclasslist = new ArrayList<CriminalBean>();
//            Map<String,String> map = new HashMap<>();
//            for (CriminalBean criminal:entityList){
//                map.put(criminal.getCaseclass(),criminal.getCodedesc());
//            }
//            request.setAttribute("caseclassmap",map);
//
//        } catch (WebMessageException e) {
//            e.printStackTrace();
//            request.setAttribute("message", e.getMessage());
//            return "ERROR";
//        }
//        return "SUCCESS";
//    }

    /* 增删改 */

    // 新增
	/*@Action(value = Url.NOTICE_ADD_SUBMIT)
	public void add() {
		notice.setNoticeId("" + Math.random() * 100 + Math.random() * 10);
		notice.setIstate("0");
		Dept dept = deptService.getDeptByDeptId(createUnitCode);
		String deptName = dept.getDeptName();
		notice.setCreateUnitName(deptName);
		notice.setCreateTime(new Date().toString());
		service.save(notice);
	}*/

    // 编辑
	/*@Action(value =  Url.NOTICE_UPDATE_SUBMIT)
	public void update() {
			notice.setNoticeId(noticeId);
			notice.setNoticeTitle(noticeTitle);
			notice.setNoticeContent(noticeContent);
			notice.setIstate(istate);
			notice.setCreateUser(createUser);
			notice.setCreateUnitName(createUnitName);
			notice.setCreateUnitCode(createUnitCode);
			notice.setCreateTime(createTime);
			notice.setUserId(userId);
			service.update(notice);
	}*/

    //修改
	/*@Action(value =  Url.NOTICE_DELETE_SUBMIT)
	public void delete() {
		String[] noticeIds = new String[] {};
		noticeIds = noticeId.split(",");
		for (String noticeId : noticeIds) {
			System.out.println(noticeId);
			service.delete(service.getByNoticeId(noticeId));
		}
	}*/
}
