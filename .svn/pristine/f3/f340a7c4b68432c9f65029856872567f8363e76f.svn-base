package com.action;

import com.alibaba.fastjson.JSONObject;
import com.constant.Url;
import com.model.*;
import com.model.bean.*;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ModelDriven;
import com.service.*;
import com.utils.ExecuteResult;
import com.utils.StoreUtil;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Result;
import org.springframework.beans.factory.annotation.Autowired;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Calendar;

/**
 * 类名称：ArchiveAction 类描述：消息的实现
 */
@SuppressWarnings("serial")
// @ParentPackage("json-default")
@Action(value = Url.ARCHIVE_STORES_BOX)
// 使用 convention-plugin 插件提供的@Action 注解将一个普通 java 类标注为一个可以处理用户请求的 Action，Action的名字为 struts2Test
// @Results({ @Result(name = "jsonmenu",params={"root","list"}, type = "json") })
// @Namespace("/")//使用 convention-plugin 插件提供的@Namespace 注解为这个 Action 指定一个命名空间
public class ArchiveStoresBoxAction extends BaseAction<ArchiveStoresBox> implements ModelDriven<ArchiveStoresBox> {
    @Autowired
    private ArchiveStoresBoxService service;
    @Autowired
    private ArchiveStoresLockersService archiveStoresLockersService;
    @Autowired
    private CriminalService criminalService;
    @Autowired
    private ArchiveService archiveService;
    @Autowired
    private ArchiveCaseService archiveCaseService;
    @Autowired
    private UserService userService ;

    private ArchiveStoresBoxBean bean = new ArchiveStoresBoxBean();

    @Override
    public ArchiveStoresBoxBean getModel() {
        return bean;
    }

    ActionContext context = ActionContext.getContext();
    private HttpServletRequest request = ServletActionContext.getRequest();

    @Action(value = Url.ARCHIVE_STORES_BOX_PAGE_SHOW, results = {@Result(name = "SUCCESS", location = Url.VIEWS + "archive/storesBox/show.jsp")})
    public String index() throws Exception {
        // 获取当前登录的用户
        User user = this.getUser(request);
        ArchiveStoresLockersBean archiveStoresLockersBean = archiveStoresLockersService.findInvolvedStoresLockersById(bean.getArchiveStoresId());
        request.setAttribute("archiveStores",archiveStoresLockersBean);
        int col = 2;//横
        int row = 6;//竖
        String[] boxGroup = new String[(int)Math.ceil(Double.parseDouble(archiveStoresLockersBean.getLockerGate()) / (col * row))];//1组col * row个箱子
        String[] boxNum = new String[col * row];//1组col * row个箱子
        request.setAttribute("boxgroup",boxGroup);
        request.setAttribute("boxnum",boxNum);

        // 查询数据
        service.pageQuery(getPageBean(), bean);
        // 获取分页数据
        List<ArchiveStoresBoxBean> entityList = pageBean.getRows();
        // 填充查询对象
        ArchiveStoresBoxBean[]  archiveStoresBoxBeanArray= new ArchiveStoresBoxBean[Integer.parseInt(archiveStoresLockersBean.getLockerGate())];
        for(ArchiveStoresBoxBean a : entityList){
            archiveStoresBoxBeanArray[Integer.parseInt(a.getCode()) - 1] = a;
        }
        request.setAttribute("searchObj", bean);
        if (bean.getArchiveStoresId()!=null){
            request.setAttribute("storesId",bean.getArchiveStoresId());
        }
        Map<String, String> isBoxUser = new HashMap();
        Map<String, Object> map = new HashMap();
        for( int i = 0; i<entityList.size(); i++){
            if(user.getId().equals(entityList.get(i).getBoxUser())){
                isBoxUser.put(entityList.get(i).getCode(), "1");
            }
        }
        request.setAttribute("entityList",archiveStoresBoxBeanArray);
        request.setAttribute("isBoxUser",isBoxUser);

       String state = "-1";//-1不是，0保管员
        if(user.getId().equals(archiveStoresLockersBean.getUserId())){
            state = "0";
        }
        state = user.getId().equals("1") ? "0" : state;
        request.setAttribute("state",state);
        return "SUCCESS";
    }

    @Action(value = Url.ARCHIVE_STORES_BOX_PAGE_DATA)
    public void index1() throws Exception {
        HttpServletResponse response = ServletActionContext.getResponse();
        response.setCharacterEncoding("utf-8");
        JSONObject jsonObject = null;
        // 获取当前登录的用户
        User user = this.getUser(request);
        // 查询数据
        service.pageQuery(getPageBean(), bean);
        // 获取分页数据
        List<ArchiveStoresBoxBean> entityList = pageBean.getRows();
        // 填充查询对象
        request.setAttribute("searchObj", bean);
        if (bean.getArchiveStoresId()!=null){
            request.setAttribute("storesId",bean.getArchiveStoresId());
        }
        Map<String, String> isBoxUser = new HashMap();
        Map<String, Object> map = new HashMap();
        for( int i = 0; i<entityList.size(); i++){
            if(user.getId().equals(entityList.get(i).getBoxUser())){
                isBoxUser.put(entityList.get(i).getCode(), "1");
            }
        }
        map.put("entityList",entityList);
        map.put("isBoxUser",isBoxUser);
        response.getWriter().write(jsonObject.toJSONString(map));
    }
    /**
     * 添加页面
     *
     * @return
     */
    @Action(value = Url.ARCHIVE_STORES_BOX_ADD_SHOW, results = {
            @Result(name = "SUCCESS", location = Url.VIEWS + "archive/storesBox/add_update_show.jsp")})
    public String showAdd() {
        String storesId = request.getParameter("storesId");
        String code = request.getParameter("code");
        request.setAttribute("storesId",storesId);
        request.setAttribute("code",code);
        return "SUCCESS";
    }

    /**
     * 新增
     *
     * @throws Exception
     */
    @Action(value = Url.ARCHIVE_STORES_BOX_ADD_SUBMIT)
    public void add() throws Exception {
        HttpServletResponse response = ServletActionContext.getResponse();
        response.setCharacterEncoding("utf-8");
        JSONObject jsonObject = null;
        UserBean userBean =  userService.findUserById(bean.getBoxUser());
        //获取当前毫秒数
        Calendar Cld = Calendar.getInstance();
        int MI = Cld.get(Calendar.MILLISECOND);
        bean.setBoxCode(userBean.getDeptId() + bean.getCode() + MI);
        try {
            service.addBean(bean);
            jsonObject = ExecuteResult.jsonReturn(ExecuteResult.SUCCESS_STATUS, true);
        } catch (Exception e) {
            jsonObject = ExecuteResult.jsonReturn(ExecuteResult.ERROR_STATUS, e.getMessage());
        }
        response.getWriter().write(jsonObject.toJSONString());
    }

    /**
     * 修改页面
     *
     * @return
     */
    @Action(value = Url.ARCHIVE_STORES_BOX_UPDATE_SHOW, results = {
            @Result(name = "SUCCESS", location = Url.VIEWS + "archive/storesBox/add_update_show.jsp")})
    public String showEdit() {
        try {
            ArchiveStoresBoxBean resultBean = service.findArchiveStoresBoxById(bean.getId());
            request.setAttribute("entity", resultBean);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "SUCCESS";
    }

    /**
     * 编辑
     *
     * @throws Exception
     */
    @Action(value = Url.ARCHIVE_STORES_BOX_UPDATE_SUBMIT)
    public void update() throws Exception {
        HttpServletResponse response = ServletActionContext.getResponse();
        response.setCharacterEncoding("utf-8");
        JSONObject jsonObject = null;
        try {
            service.updateBean(bean.getId(), bean);
            // 返回操作成功标志200， 并关闭对话框
            jsonObject = ExecuteResult.jsonReturn(ExecuteResult.SUCCESS_STATUS, true);
        } catch (Exception e) {
            // 返回失败标识，并写入错误信息
            jsonObject = ExecuteResult.jsonReturn(ExecuteResult.ERROR_STATUS, e.getMessage());
        }
        response.getWriter().write(jsonObject.toJSONString());
    }

    /**
     * 删除
     *
     * @throws Exception
     */
    @Action(value = Url.ARCHIVE_STORES_BOX_DELETE_SUBMIT)
    public void delete() throws Exception {
        HttpServletResponse response = ServletActionContext.getResponse();
        response.setCharacterEncoding("utf-8");
        JSONObject jsonObject = null;
        try {
            service.deleteBean(bean.getId());
            jsonObject = ExecuteResult.jsonReturn(ExecuteResult.SUCCESS_STATUS, null);
        } catch (Exception e) {
            jsonObject = ExecuteResult.jsonReturn(ExecuteResult.ERROR_STATUS, e.getMessage());
        }
        response.getWriter().write(jsonObject.toJSONString());
    }
    /**
     * 详情展示ARCHIVE_STORES_BOX_WARE_SHOW
     *
     * @throws Exception
     */
    @Action(value = Url.ARCHIVE_STORES_BOX_DETAIL_SHOW,
            results = {@Result(name = "SUCCESS", location = Url.VIEWS + "archive/storesBox/detail.jsp")})
    public String getDetails() throws Exception {
        // 获取当前登录的用户
        User user = this.getUser(request);
        // 查询数据
        try {
            List<CriminalBean> criminalBeanList = criminalService.findDataAllByBoxId(bean.getId());
            List<ArchiveCaseBean> archiveCaseBeanList =  archiveCaseService.selectDataByBoxId(bean.getId());
            for (CriminalBean criminalBean : criminalBeanList) {
                criminalBean.setArchiveBeanList(new ArrayList<ArchiveBean>());
                for (ArchiveCaseBean archiveCaseBean : archiveCaseBeanList) {
                    if(criminalBean.getCaseid().equals(archiveCaseBean.getCaseId())){
                        criminalBean.getArchiveBeanList().add(archiveService.findArchiveById(archiveCaseBean.getArchiveId()));
                    }
                }
            }
            request.setAttribute("list", criminalBeanList);
        } catch (Exception e) {
            e.printStackTrace();
        }

        //List<ArchiveStoresBoxBean>  list= service.selectDateById(bean);
        // 填充查询对象

        return "SUCCESS";
    }
        /**
         * 入库展示
         *
         * @throws Exception
         */
        @Action(value = Url.ARCHIVE_STORES_BOX_WARE_SHOW,
                results = {@Result(name = "SUCCESS", location = Url.VIEWS + "archive/storesBox/ware_show.jsp")})
        public String getWareDetails() throws Exception {
            // 获取当前登录的用户
            User user = this.getUser(request);
            // 查询数据
            try{
                List<ArchiveStoresBoxBean> list = service.findArchiveStoresBoxByBoxUser(user.getId());
                for(ArchiveStoresBoxBean archiveStoresBoxBean:list){
                    archiveStoresBoxBean.setArchiveCaseBeanList(archiveCaseService.selectDataByBoxId(archiveStoresBoxBean.getId()));
                }
                request.setAttribute("archiveid",bean.getArchiveBean().getId());
                request.setAttribute("caseid",bean.getCriminalBean().getCaseid());
                request.setAttribute("list", list);
            }catch (Exception e){e.printStackTrace();}

            return "SUCCESS";
    }

    /**
     * 开锁
     *
     * @throws Exception
     */
    @Action(value = Url.ARCHIVE_STORES_BOX_OPEN_BOX)
    public void openBox() throws Exception {
        HttpServletResponse response = ServletActionContext.getResponse();
        response.setCharacterEncoding("utf-8");
        JSONObject jsonObject = null;
        ArchiveStoresLockersBean archiveStoresLockersBean = archiveStoresLockersService.findInvolvedStoresLockersById(bean.getArchiveStoresId());
        //
        String path = archiveStoresLockersBean.getIntegration().equals("2") ? archiveStoresLockersBean.getPostPath() : archiveStoresLockersBean.getHost();
        try {
            StoreUtil.openBox(Integer.parseInt(bean.getCode()),path);
            jsonObject = ExecuteResult.jsonReturn(ExecuteResult.SUCCESS_STATUS, null);
        } catch (Exception e) {
            jsonObject = ExecuteResult.jsonReturn(ExecuteResult.ERROR_STATUS, e.getMessage());
        }
        response.getWriter().write(jsonObject.toJSONString());
    }
}
